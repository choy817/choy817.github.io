---
layout: post
title: "[DB]조인의 종류와 원리"
category: DB
---

### 조인
---
- 하나의 테이블이 아닌 두 개 이상의 테이블을 묶어서 하나의 결과물로 만드는 것   
- MYSQL에서는 JOIN이라는 쿼리로, MongoDB에서는 lookup이라는 쿼리로 처리 가능 
- 여러 테이블을 조인하는 작업이 많을 경우 관계형 데이터베이스를 써야 한다


#### 내부 조인
- 왼쪽 테이블과 오른쪽 테이블 두 행이 모두 일치하는 행이 있는 부분만 표기한다
- 두 테이블간의 교집합

```SQL
SELECT * FROM TableA A
INNER JOIN TableB
ON A.key=B.key
```
&nbsp;

#### 왼쪽 조인
- 왼쪽 모든 테이블(테이블 A)의 행이 결과 테이블에 표시된다
- 오른쪽 테이블(테이블 B)에 일치하는 항목이 없으면 해당 값은 null이 된다

```SQL
SELECT * FROM TableA A
LEFT JOIN TableB
ON A.key=B.key
```
&nbsp;

#### 오른쪽 조인
- 오른쪽 테이블(테이블 B)의 모든 행이 결과 테이블에 표시된다
- 왼쪽 테이블(테이블 A)에 일치하는 항목이 없으면 해당 값은 null이 된다

```SQL
SELECT * FROM TableA A
RIGHT JOIN TableB
ON A.key=B.key
```
&nbsp;

#### 합집합 조인
- 두 개의 테이블을 기반으로 조인 조건에 만족하지 않는 행까지 모두 표기한다
- 일치하는 항목이 없으면 누락된 쪽에 null값이 포함되어 출력된다

```SQL
SELECT * FROM TableA A
FULL OUTER JOIN TableB
ON A.key=B.key
```
&nbsp;


### 조인의 원리
---
조인은 조인의 원리를 기반으로 작업이 이뤄진다   
&nbsp;

#### 중첩 루프 조인
- 중첩 for문과 같은 원리로 조건에 맞는 조인을 하는 방법
- 랜덤 접근에 대한 비용이 많이 증가해 대용량의 테이블에서는 사용하지 않음
- 첫번째 테이블에서 행을 한번에 하나씩 읽고 그다음 테이블에서도 행을 하나씩 읽어 조건에 맞는 레코드를 찾아 결괏값을 반환한다   

&nbsp;

#### 정렬 병합 조인
- 각 테이블을 조인할 필드 기준으로 정렬 후에 조인 작업을 수행
- 정렬 병합 조인을 사용할 때
  - 조인 시 사용할 적절한 인덱스가 없을 때
  - 대용량의 테이블을 조인할 때
  - 조인 조건으로 <, > 등 범위 비교 연산자가 있을 때   

&nbsp;

#### 해시 조인
- 해시 테이블을 기반으로 조인
- 두 테이블을 조인할 때 하나의 테이블이 메모리에 온전히 들어간다면 중첩 루프보다 효율적
  - 메모리에 올릴 수 없을 정도로 크다면 디스크를 사용하는 비용이 발생된다
- 동등 조인(=)에서만 사용 가능
