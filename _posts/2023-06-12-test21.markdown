---
layout: post
title: "[기초]배열 만들기 4"
category: Programmers
---

### 문제
---
정수 배열 arr가 주어집니다. arr를 이용해 새로운 배열 stk를 만드려고 합니다.

변수 i를 만들어 초기값을 0으로 설정한 후 i가 arr의 길이보다 작으면 다음 작업을 반복합니다.

만약 stk가 빈 배열이라면 arr[i]를 stk에 추가하고 i에 1을 더합니다.
stk에 원소가 있고, stk의 마지막 원소가 arr[i]보다 작으면 arr[i]를 stk의 뒤에 추가하고 i에 1을 더합니다.
stk에 원소가 있는데 stk의 마지막 원소가 arr[i]보다 크거나 같으면 stk의 마지막 원소를 stk에서 제거합니다.
위 작업을 마친 후 만들어진 stk를 return 하는 solution 함수를 완성해 주세요.


&nbsp;


- 제한사항
    - 1 ≤ arr의 길이 ≤ 100,000
        - 1 ≤ arr의 원소 ≤ 100,000


&nbsp;

입출력 예

|arr|result|
|---|---|
|[1, 4, 2, 5, 3]|	[1, 2, 3]|


입출력 예 설명   

입출력 예 #1   
각 작업을 마친 후에 배열의 변화를 나타내면 다음 표와 같습니다.

|i	|arr[i]|	stk|
|---|---|---|
|0	|1	|[]|
|1	|4	|[1]|
|2	|2	|[1, 4]|
|2	|2	|[1]|
|3	|5	|[1, 2]|
|4	|3	|[1, 2, 5]|
|4	|3	|[1, 2]|
|-	|-	|[1, 2, 3]|

따라서 [1, 2, 3]을 return 합니다.
&nbsp;

### 제출한 답
---
```java
import java.util.*;

class Solution {
    public int[] solution(int[] arr) {
        //스택 생성
         Stack<Integer> stack = new Stack<>();
        int i=0;

        while (i<arr.length){
            //스택이 비어있을 경우
             if(stack.size()==0){
                stack.push(arr[i]);
                i++;
            }
            //맨 마지막 스택의 원소
            int last=stack.get(stack.size()-1);
            //마지막 원소가 작을 경우
            if(last < arr[i]){
                stack.push(arr[i]);
                i++;
            //마지막 원소가 크거나 같을 경우    
            }else if(last >= arr[i]){
                stack.pop();
            }

        }
        //스택을 배열로 변환
        int[] stk=stack.stream().mapToInt(j->j).toArray();
        return stk;
    }
}
```

&nbsp;

🔘 마지막 원소 구하기에 대해

![표](https://github.com/choy817/choy817.github.io/assets/83875844/042ed57d-17ef-4af6-8398-053b76787e4e)

인덱스는 0부터 시작한다. 위 그림으로 보았을 때 stack의 size는 5이지만 마지막 인덱스는 4이므로 size()-1을 해주어야 올바르게 마지막 원소의 값을 구할 수 있다


하지만 굳이 size로 마지막 원소를 구하지 않고 stack.peek()를 사용하면 현재 top에 있는 원소를 삭제하지 않고 반환해준다