---
layout: post
title: "[기초]수열과 구간 쿼리 2"
category: Programmers
---

### 문제
---
정수 배열 arr와 2차원 정수 배열 queries이 주어집니다. queries의 원소는 각각 하나의 query를 나타내며, [s, e, k] 꼴입니다.

각 query마다 순서대로 s ≤ i ≤ e인 모든 i에 대해 k보다 크면서 가장 작은 arr[i]를 찾습니다.

각 쿼리의 순서에 맞게 답을 저장한 배열을 반환하는 solution 함수를 완성해 주세요.   
단, 특정 쿼리의 답이 존재하지 않으면 -1을 저장합니다.   
&nbsp;


- 제한사항
    - 1 ≤ arr의 길이 ≤ 1,000
      - 0 ≤ arr의 원소 ≤ 1,000,000
    - 1 ≤ queries의 길이 ≤ 1,000
      - 0 ≤ s ≤ e < arr의 길이
      - 0 ≤ k ≤ 1,000,000

  


&nbsp;

입출력 예

|arr	|queries	|result|
|---|---|---|
|[0, 1, 2, 4, 3]	|[[0, 4, 2],[0, 3, 2],[0, 2, 2]]|	[3, 4, -1]|


입출력 예 설명   

입출력 예 #1   
첫 번째 쿼리의 범위에는 0, 1, 2, 4, 3이 있으며 이 중 2보다 크면서 가장 작은 값은 3입니다.   
두 번째 쿼리의 범위에는 0, 1, 2, 4가 있으며 이 중 2보다 크면서 가장 작은 값은 4입니다.   
세 번째 쿼리의 범위에는 0, 1, 2가 있으며 여기에는 2보다 큰 값이 없습니다.   
따라서 [3, 4, -1]을 return 합니다.   
&nbsp;

### 제출한 답
---
```java
class Solution {
    public int[] solution(int[] arr, int[][] queries) {
        int[] answer = new int[queries.length];
        int s=0,e=0,k=0;

        for(int i=0;i<queries.length;i++){
            //문제의 i와 비교할 s,e,k를 선언
            s=queries[i][0];
            e=queries[i][1];
            k=queries[i][2];
            //arr의 최댓값
            int min =1000000;

            for (int j=s;j<=e;j++){
                //arr[j]의 원소가 K보다 크고 min보다 작으면(문제에서는 i)
                if(arr[j]>k && min>arr[j]){
                    //최솟값을 변경
                    //k보다 크지만 가장 작은 arr 값을 찾는 과정
                    min=arr[j];
                }
            }
            //min값이 변경되지 않으면 쿼리에 답이 존재하지 않는 것
            if(min==1000000){
                answer[i]=-1;
            //min 값이 변경되었으면 답이 있으므로 answer[i]에 저장    
            }else {
                answer[i]=min;
            }
        }
        return answer;
    }
}
```

어렵게 어렵게 헤매다 푼 문제   
대략적인 흐름은 파악했는데 그걸 코드로 구현하기가 어려웠다.    
min의 초기값을 어떻게 설정해야 할 지를 두고 고민이었는데 문제를 잘 읽어야 답이 보임을 다시한번 깨닫고 간다. 제한사항이 없다면 Integer.MAX_VALUE로 값을 설정해도 괜찮을 듯