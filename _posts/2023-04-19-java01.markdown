---
layout: post
title: "객체지향 프로그래밍의 개념"
category: Java
---

### 객체
---
객체지향 프로그래밍의 핵심 개념   
실세계의 개체이다(차, 탁자, 고양이...)   
상태(필드)와 동작(메서드)로 구성되어 있음   

ex)
- 상태 : 고양이 이름, 고양이 품종, 고양이 색
- 동작 : 놀고, 먹고 ,야옹 울기   

클래스의 인스턴스를 나타낸다   
다른 객체와 소통할 수 있음   

ex)
- 객체 소년이 객체 고양이를 어루만진다
- 객체 소년이 객체 고양이를 재운다   

&nbsp;

### 클래스
---
클래스는 객체를 만드는 법을 알려주는 레시피임   
객체를 만드는 과정을 인스턴스화 한다고 하며 new 키워드로 수행한다   
인스턴스화는 여러번 가능하다   
하나의 클래스는 하나의 작업만 다룬다(단일 책임의 원칙)   

&nbsp;
### 추상화
---
사용자와 관련있는 내용만 노출하고 나머지는 숨긴다   
내용을 노출하는 복잡성을 숨기고 코드의 재사용성을 높이는 장점이 있다(interface)   

&nbsp;
### 캡슐화
---
코드와 데이터를 클래스로 결합하고 외부 코드가 이 데이터에 직접 접근하지 못하게 하는 방어막 역할을 한다   
각 객체는 private로 상태를 유지하고 접근하기 위해서는 public 메서드를 사용한다. 직접적으로 데이터에 접근해서 값을 수정 할 수 없다.   

&nbsp;
### 상속
---
IS-A관계이며 부자관계라고도 한다   
객체의 코드를 재사용하여 각 객체만의 로직을 추가할 수 있다   
각 객체들이 유사한 로직을 공유하지만(가지고 있지만) 완전히 동일하지 않을 때 유용하다   

- 상속한 객체 : 슈퍼(부모)   
- 상속받은 객체 : 서브(자식)   

자바에서는 여러 클래스를 상속할 수 없고 하나의 클래스만 상속할 수 있다.   
여러 클래스를 상속받을 경우 각 부모클래스에 있는 메소드를 오버라이딩 했을 때 어떤 부모의 클래스를 사용해야 하는지 알 수 없게 되는 다이아몬드 문제가 발생한다   

&nbsp;
### 다형성
---
때에 따라 객체가 다르게 동작함을 말함   
- 오버로딩 : 메서드 이름이 동일하지만 매개변수의 갯수가 상이하다
- 오버라이딩 : 정의된 메소드를 재정의한다   

&nbsp;

### 연관
---
서로 독립적인 두 클래스 간의 관계   
일대일, 일대다, 다대다 관계가 될 수 있다   

&nbsp;
### 집약
---
단방향 연관관계의 특별한 경우   
HAS-A관계를 가진다   
ex) 라켓은 테니스 선수를 사용할 수 없다   

&nbsp;
### 구성
---
좀더 제한적인 집약관계   
단독으로 존재 할 수 없는 HAS-A(PART-OF) 관계를 가진다
ex) 차가 파괴되면 엔진도 파괴된다   