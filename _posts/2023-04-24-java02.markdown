---
layout: post
title: "객체지향 개발의 5대원칙 : SOLID"
category: Java
---

### S : 단일 책임의 원칙
---
- 하나의 클래스는 하나의 책임만 져야 한다,
- 모든 유형의 클래스가 준수해야 하는 원칙
- 높은 유지보수성과 가시성을 제공한다
- 클래스의 기능 설명을 위해서 "또한" 이라는 단어가 사용되면 단일 책임의 원칙이 깨진 것이다
  - ex) 도형의 면적을 구하는 기능과 구한 면적을 인치로 단위변환 하는 클래스는 단일 책임의 원칙을 위반한 클래스이다.   
  &nbsp;


### O : 개방-폐쇄의 원칙
---
- 확장에 대해선 열려있어야 하고 수정에 대해서는 닫혀 있어야 한다.
- 단순히 클래스를 확장하기만 해도 클래스가 동작하는 내용이 업데이트 될 수 있게 한다
- ex) 여러 도형의 면적을 구하는 프로그램을 만들 때 if나 switch문을 사용하여 구현하려고 하면 새로운 도형을 추가할 때 마다 조건문을 추가해야 한다. 각 도형의 인터페이스를 만들고 도형의 면적을 구하는 메소드를 만들어 실사용 시 오버라이딩 할 수 있게 수정한다.   
&nbsp;


### L : 리스코프 치환의 원칙
---
- 서브클래스의 객체는 슈퍼클래스의 객체와 반드시 같은 방식으로 동작하여야 한다.
- 즉, 아무런 문제 없이 슈퍼 클래스를 대체할 수 있어야 한다.
- ex) 회원 등급별로 혜택이 상이 할 때, 가장 최하위 등급이 가장 최상위등급의 혜택 메소드를 사용하게 되는 일이 없어야 한다.   
&nbsp;

### I : 인터페이스 분리의 원칙
---
- 클라이언트가 사용하지 않는 불필요한 메소드를 강제로 구현하게 해서는 안된다.
- 강제 구현하는 일이 없을 때 까지 인터페이스를 두 개 이상 분할하는 원칙
- ex) 프린터기에서 복사기능만 사용하고 싶은데 오버라이딩을 통해 프린트와 팩스 기능까지 구현되어버릴 경우 인터페이스를 분리하거나 인터페이스를 확장하는 별도의 인터페이스를 만든다.   
&nbsp;

### D : 의존관계 역전의 원칙
---
- 구체화가 아닌 추상화에 의존해야 하는 원칙
- 구현하는 내용이 변경되더라도 추상화가 변경되면 안된다.
- ex) 아이가 레고를 가지고 놀다가 로봇으로 바꿔서 놀면 장난감 클래스에 메서드를 새로 추가해야 한다.(아이는 장난감의 종류라는 구체적인 객체에 의존하고 있다) 이 경우 아이가 장난감을 가지고 노는 것은 변함이 없으므로 장난감을 추상화하고 로봇, 레고 객체가 장난감을 상속받아서 구현한다.