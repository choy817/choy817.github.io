---
layout: post
title: "[네트워크]데이터의 송, 수신"
category: 네트워크
---

### 데이터 송, 수신 동작의 개요
---
IP주소를 조사했으면 액세스 대상 웹 서버에 메세지를 송신하도록 OS내부에 있는 프로토콜 스택에 의뢰한다.
DNS에서 IP주소를 조회하는 것 처럼 Soket 라이브러리 안에 있는 부품을 이용한다. IP주소를 조회할 때와의 차이점은 메세지 송신 동작을 할 때 복수의 부품을 결정된 순서대로 호출한다.   
&nbsp;

송, 수신 동작은 네 단계로 요약할 수 있다.
- 소켓을 만든다(소켓 작성 단계)
- 서버측에 소켓의 파이프를 연결한다(접속 단계)
- 데이터를 송, 수신한다(송, 수신 단계)
- 파이프를 분리하고 소켓을 말소한다(연결 끊기 단계)   
&nbsp;

### 소켓 작성 단계
---
클라이언트측 소켓 만들기   
- 소켓 라이브러리의 socket이라는 프로그램 부품을 호출한다.   
- 소켓이 생기면 디스크립터가 돌아온다.   

디스크립터 : 소켓을 식별하기 위해 사용하는 것   
컴퓨터 내부에서 복수의 데이터 송, 수신 동작이 동시에 진행될 경우가 있는데 이 경우 소켓을 하나하나 식별해야 한다. 그럴 때 사용하는 것이 디스크립터   
&nbsp;


### 접속 단계
---
만든 소켓을 서버측의 소켓에 접속하도록 프로토콜 스택에 의뢰한다. 애플리케이션은 소켓 라이브러리의 connect라는 프로그램 부품을 호출하여 동작을 진행하는데, connect 호출 시 아래 세 가지를 지정해주어야 한다.

- 디스크립터
  - 소켓을 만들 때 돌아온 디스크립터
  - 프로토콜 스택이 디스크립터를 보고 어느 소켓을 서버측의 소켓에 접속할지 판단한다.


- 서버의 IP주소와 포트 번호
  - IP주소로 지정할 수 있는 것은 네트워크의 어떤 컴퓨터인가 하는 것 까지이다. 
  - 소켓까지 지정할 수 없기 때문에 포트번호까지 지정하여 상대측 소켓을 식별한다.
  - 서버 측의 포트번호는 애플리케이션의 종류에 따라 미리 결정되어 있다.
    - ex) 웹 : 80번, 메일 : 25번 ...   

&nbsp;

### 송, 수신 단계
---
(1) 수신   
소켓에 데이터를 보내면 상대측의 소켓에 데이터가 도착한다.   
애플리케이션은 소켓을 직접 다룰 수 있으므로 소켓 라이브러리의 프로토콜 스택에 의뢰하여 write를 이용한다.   

- 애플리케이션은 송신 데이터(Http 리퀘스트 메세지)를 메모리에 준비한다.   
- write 호출 시 디스크립터와 송신 데이터를 지정한다.   
- 프로토콜 스택이 송신 데이터를 서버에게 송신한다.   
- 소켓에 연결된 상대가 기록되어 있으므로 디스크립터로 소켓을 지정하여 데이터를 송신한다.   
- 서버에 도착하면 서버는 응답 메세지를 반송한다.   

(2) 송신   
- 소켓 라이브러리의 read를 이용하여 프로토콜 스택에 수신 동작을 의뢰한다.   
- 수신한 응답 메세지를 저장하기 위해 메모리 영역을 지정한다. -> 수신 버퍼라고 부른다.   
- 응답 메세지가 돌아 올 때 read가 받아서 수신 버퍼에 저장한다.   
- 수신 버퍼에 메세지를 저장한 시점에서 메세지를 애플리케이션에게 건네준다.

&nbsp;


### 연결 끊기 단계
---
브라우저가 데이터 수신을 완료하면 송, 수신 동작은 끝난다.   
소켓 라이브러리의 close를 이용하여 연결 끊기를 의뢰한다.   
소켓 사이를 연결한 파이프가 분리되고 소켓도 말소된다.   
&nbsp;

HTTP는 문서나 영상 데이터를 하나하나 별도의 것으로 취급하여 한 개의 데이터를 읽을 때 마다 접속, 송신, 수신, 종료의 동작을 반복한다.