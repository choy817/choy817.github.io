---
layout: post
title: "[네트워크]프로세스"
category: 네트워크
---

### 프로세스란?
---
- 컴퓨터에서 실행되고 있는 프로그램
- CPU 스케줄링의 대상이 되는 작업

프로그램이 메모리에 올라가면 프로세스가 되고, 이후 CPU가 프로세스를 실행한다.

(1) 프로그램
  - 컴파일러가 컴파일 과정을 거쳐 기계어로 번역되어 실행될 수 있는 것
  - 프로그램의 컴파일 과정(C언어 기준)
    - 전처리   
    \- 소스코드의 주석을 제거하고 헤더파일을 병합하여 매크로를 치환한다.
    - 컴파일러   
      \- 오류 처리, 코드 최적화 작업을 하며 어셈블리어로 변환한다.
    - 어셈블러   
      \- 목적 코드로 변환한다. 확장자는 운영체제마다 다르다.   
      \- ex) 리눅스에서 hello.c라는 파일을 만들었을 때 hello.o라는 파일이 만들어짐
    - 링커   
      \- 프로그램 내 라이브러리 함수 또는 타 파일과 목적 코드를 결합하여 실행 파일을 만든다(확장자 : .exe or .out)   
      \- 정적 라이브러리 : 프로그램 빌드 시 라이브러리가 제공하는 모든 코드를 실행파일에 넣음   
      \- 동적 라이브러리 : 실행 시 필요할 때만 DLL이라는 함수 정보를 통해 참조   

(2) 프로세스
  - 프로그램으로부터 인스턴스화 된 것   
&nbsp;

### 프로세스의 상태
---
(1) 생성 상태
  - 프로세스가 생성된 상테. fork()나 exec() 함수를 통해 생성됨
      - fork() : 부모 프로세스의 주소 공간을 그대로 복사하여 새로운 자식 프로세스를 생성
      - exec() : 새로운 프로세스 생성

(2) 대기 상태
  - 메모리 공간이 충분하면 할당, 아니면 아닌채로 대기
  - CPU로부터 소유권이 넘어오기를 대기

(3) 대기 중단 상태
  - 메모리 부족으로 일시 중단된 상태

(4) 실행 상태
  - CPU소유권과 메모리 할당받고 인스트럭션 수행중

(5) 중단 상태
  - 이벤트 발생 후 프로세스가 차단된 상태

(6) 일시 중단 상태
  - 대기 중단과 유사
  - 중단된 상태에서 프로세스가 실행하려 했으나 메모리 부족으로 일시 중단

(7) 종료 상태
  - 메모리와 CPU 소유권을 모두 놓고 가는 상태
  - 자연스럽게 종료되는 것도 있지만, 비자발적으로 종료되는 경우도 있다.    
&nbsp;

### 프로세스의 메모리 구조
---
운영체제가 프로세스에 메모리를 할당하는 법    
&nbsp;

(1) 스택
  - 지역변수, 매개변수, 함수가 저장
  - 컴파일 시에 크기가 결정
  - 동적인 특징
  - 힙과 스택의 영역이 겹치면 안되기 때문에 힙과 스택사이에는 공간이 비워져 있다.

(2) 힙
  - 동적 할당 시 사용
  - 런타임 시 크기가 결정됨

(3) 데이터 영역
  - 전역변수, 정적변수가 저장
  - BSS, Data 영역으로 나뉨
    - BSS : 초기화 되지 않은 변수가 0으로 초기화되어 저장
    - Data : 0이 아닌 다른 값으로 할당된 변수들이 저장

(4) 코드 영역
  - 프로그램에 내장되어 있는 소스코드가 있음
  - 수정 불가능한 기계어로 저장
  - 정적인 특징   
&nbsp;

### PCB
---

- 프로세스 제어 블록
- 운영체제에서 프로세스에 대한 메타데이터를 저장한 데이터
- 프로그램이 실행되면
  - 프로세스가 생성되고
  - 메모리가 할당되며
  - 메타데이터가 PCB에 저장되어 관리됨   
&nbsp;

### 멀티프로세싱
---
- 동시에 두 가지 이상의 일을 수행할 수 있는 것
- 문제가 발생되더라도 다른 프로세스를 이용하므로 신뢰성이 높다   
&nbsp;

(1) 멀티 프로세스 구조를 가지는 웹 브라우저
- 브라우저 프로세스 : 네트워크 요청이나 파일 같은 접근 권한을 담당
- 렌더러 프로세스 : 웹 사이트가 보이는 부분의 모든 것 제어
- 플러그인 프로세스 : 웹 사이트에서 사용하는 플러그인을 제어
- GPU 프로세스 : GPU를 이용해서 화면을 그리는 부분을 제어   

(2) IPC   
프로세스끼리 데이터를 주고받고 공유 데이터를 관리하는 메커니즘(ex. 클라이언트와 서버)

- 공유 메모리
  - 여러 프로세스에 동일한 메모리 블록에 대한 접근 권한 부여하여 프로세스가 통신할 수 있도록 공유 버퍼를 생성
  - 각 프로세스의 메모리를 다른 프로세스가 접근할 수 없으나 공유 메모리를 통해 여러 프로세스가 하나의 메모리를 공유 가능
- 파일
  - 디스크에 저장된 데이터 또는 파일 서버에서 제공한 데이터
- 소켓
  - 동일한 컴퓨터의 같은 프로세스 혹은 네트워크의 다른 컴퓨터로 전송하는 데이터
  - TCP, UDP가 있음
- 익명 파이프
  - 임시 공간의 파이프를 기반으로 데이터를 주고받음
  - 부모, 자식 프로세스간에만 사용. 다른 네트워크에서 사용 불가
- 명명된 파이프
  - 하나의 파이프 서버, 하나 이상의 파이프 클라이언트간의 통신을 위해 명명
  - 서버용 파이프와 클라이언트용 파이프로 구분해서 작동
  - 하나의 인스턴스를 열거나 여러 개의 인스턴스를 기반으로 통신한다.
- 메시지 큐
  - 메시지를 큐(Queue)의 데이터 구조 형태로 관리
  - 사용 방법이 매우 직관적이고 간단하다



